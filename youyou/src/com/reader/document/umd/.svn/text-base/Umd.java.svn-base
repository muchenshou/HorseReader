package com.song.umd;

import java.io.*;

public class Umd implements Book {
	protected UmdFile umdStream;
	private UmdInfo umdInfo = null;
	private File umdFile;

	public Umd(File umd) throws IOException {
		umdFile = umd;
		umdInfo = new UmdInfo(umd);
		umdInfo.parseBook();
	}

	public File getFile() {
		return umdFile;
	}

	public byte[] getContent(int start, int end) throws IOException {
		if (start > end)
			return null;
		byte[] tmp = null;
		byte[] content = new byte[end - start + 1];
		UmdInflate umdinflate = new UmdInflate(this);

		if (this.getPointerInWhichBlock(start) == this
				.getPointerInWhichBlock(end)) {
			tmp = umdinflate.getContentBlock(
					this.getPointerInWhichBlock(start),
					this.getPointerInBlockLocal(start),
					this.getPointerInBlockLocal(end));
			System.arraycopy(tmp, 0, content, 0, tmp.length);
		} else {
			int contentFillNum = 0;
			tmp = umdinflate.getContentBlock(
					this.getPointerInWhichBlock(start),
					this.getPointerInBlockLocal(start),
					this.getPointerInBlockLocal(UmdFile.BLOCKSIZE - 1));
			if (tmp == null) {
				System.out.println(" Is null\t"
						+ this.getPointerInWhichBlock(start) + "\t"
						+ this.getPointerInBlockLocal(start) + "\t"
						+ this.getPointerInBlockLocal(UmdFile.BLOCKSIZE - 1));
			}
			System.arraycopy(tmp, 0, content, contentFillNum, tmp.length);
			contentFillNum += tmp.length;
			for (int i = this.getPointerInWhichBlock(start) + 1; i < this
					.getPointerInWhichBlock(end); i++) {
				tmp = umdinflate.getContentBlock(
						this.getPointerInWhichBlock(start), 0,
						UmdFile.BLOCKSIZE - 1);
				System.arraycopy(tmp, 0, content, contentFillNum, tmp.length);
				contentFillNum += tmp.length;
			}
			System.out.println("hrere " + end);
			tmp = umdinflate.getContentBlock(this.getPointerInWhichBlock(end),
					this.getPointerInBlockLocal(0),
					this.getPointerInBlockLocal(end));
			System.arraycopy(tmp, 0, content, contentFillNum, tmp.length);
			contentFillNum += tmp.length;
		}

		BytesTransfer.byteAlign(content);
		return content;
	}

	public int getPointerInWhichBlock(int pointer) {
		return pointer / (UmdFile.BLOCKSIZE);
	}

	public int getPointerInBlockLocal(int pointer) {
		return pointer % (UmdFile.BLOCKSIZE);
	}

	public byte[] getBlockContent(int index) throws IOException {
		UmdInflate umdinflate = new UmdInflate(this);
		byte[] uncomp = umdinflate.Inflate(getBlockData(index));
		Byte b = new Byte(uncomp[0]);
		System.out.println("first byte:\t " + b.toString());
		BytesTransfer.byteAlign(uncomp);
		return uncomp;
	}

	public byte[] getBlockData(int index) throws IOException {
		byte bytes[] = null;
		try {
			umdStream = new UmdFile(this.umdFile, "r");
			UmdInfo.Block b = this.umdInfo.getBlock(index);
			this.umdStream.seek(b.filePointer);
			bytes = new byte[b.blockSize];
			umdStream.read(bytes);

		} catch (IOException e) {
			e.printStackTrace();
		} finally {
			umdStream.close();
			umdStream = null;
		}
		return bytes;
	}

	public class Block {
		protected int blockNo;
		protected long filePointer;
		protected int blockSize;

		public Block(long filepointer, int size) {
			filePointer = filepointer;
			blockSize = size;
		}

		public void setBlockNo(int num) {
			blockNo = num;
		}

		public long getPointer() {
			return filePointer;
		}
	}

	@Override
	public void openBook() {

		try {
			this.umdStream = new UmdFile(this.umdFile, "r");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	@Override
	public void closeBook() {		
		if (umdStream != null) {
			try {
				umdStream.close();
			} catch (IOException e) {				
				e.printStackTrace();
			}
		}
	}

	@Override
	public void excuteCmd(int cmd) {
		// TODO Auto-generated method stub

	}

}
